table = [
    ('A', '.-'), ('B', '-...'), ('C', '-.-.'), ('D', '-..'),
    ('E', '.'), ('F', '..-.'), ('G', '--.'), ('H', '....'),
    ('I', '..'), ('J', '.---'), ('K', '-.-'), ('L', '.-..'),
    ('M', '--'), ('N', '-.'), ('O', '---'), ('P', '.--.'),
    ('Q', '--.-'), ('R', '.-.'), ('S', '...'), ('T', '-'),
    ('U', '..-'), ('V', '...-'), ('W', '.--'), ('X', '-..-'),
    ('Y', '-.--'), ('Z', '--..'),
]

def encode(ch):
    """ 모스 코드 인코딩 함수"""
    idx = ord(ch)-ord('A') # 리스트에서 해당 문자의 인덱스
    return table[idx][1]   # 해당 문자의 모스 부호 반환

def decode_simple(morse):
    """ 단순한 방법의 모스 코드 디코딩 함수"""
    for tp in table:        # 모스 코드 표의 모든 문자에 대해
        if morse == tp[1]:  # 찾는 코드와 같으면
            return tp[0]    # 그 코드의 문자를 반환
    # => 표 크기(문자 수)가 n개라면 n 번 비교해야 함 -> 매우 비효율적인 방법!

